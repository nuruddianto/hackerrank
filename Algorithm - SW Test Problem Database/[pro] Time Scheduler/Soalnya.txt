Implement a schedule management program that adds, modifies, deletes and searches a schedule. A schedule is composed of ID, TITLE, LOCATION, START_DATE and END_DATE. [Table 1] shows some examples of schedules.

ID is a non-repeatable integer. A schedule is modified or deleted on the basis of the ID.
Title and LOCATION are single character string whose maximum length is 19.
DATE is a date and a time combined character string in the format of YYYYMMDD followed by HHMM, and its length is fixed as 12.

You can perform a search by TITLE, LOCATION and DATE, which are the 3 search types available.
A character string is used to seach TITLE and DATE, and schedules that have the character strings that match the seach term exactly are returned.
A date in the format of YYYYMMDD is used to search DATE, and every schedule related to the entered date is searched.

This schedule management program offers a special function that combines the two related schedules into one schedule.
The two schedules would be considered relative to each other when the share the same TITLE and LOCATION and their time periods overlap.
The meaning of time periods overlapping one another could imply both of the two following cases : (A) and (B) in [Fig. 1].

In this case, between the two IDs being combined together, the ID with the smaller value will be saved as the ID of the newly combined schedule.
The START_DATE with the smaller value will saved as the START_DATE of the newly combined schedule.
As for END_DATE, the END_DATE with the bigger value will be savend as the END_DATE of the newly combined schedule.

[Fig. 2] shows how a newly-added schedule is combined into the existing schedule.
When the schedule 5 is added, it has the same TITLE and LOCATION with the schedule 3. And it also has one hour overlapping TIME with schedule 3.
Therefore, the two schedules are combined into one schedule and the newly combined schedule would have ID 3 and it's START_DATE and END_DATE would be saved as 6pm and 9pm respectively.

In [Fig. 3], as a schedule is modified, it gets to be combined with other schedule.
The schedule 2 and schedule 6 share the same TITLE and LOCATION.
If the END_DATE of schedule 2 is changed from 1pm to 1.30pm, it becomes same with the START_DATE of schedule 6.
In this case, they are combined the same way as (B) in [Fig. 1] above.
Therefore, the two schedules are put together to become one schedule that has ID 2, the smaller value between 2 and 6, and the schedule 6 is deleted.

As one schedule is added or modified, more than three schedules could be combined.

Implement each function referring to the API explanation below :

void Init()
A funciton thet is called at the beginning of each test case.

void Add(int id, char* title, char* location, char* start_date, char* end_date)
Add a new schedule.

Parameters
(self explanated by the parameter name)

int Modify(int id, char* title, char* location, char* start_date, char* end_date)
Modify the existing schedule corresponding to id.

Parameters
id : the ID value of the schedule to be modified
the rest of the parameters : the new values

Returns
0 : when the schedule is successfully modified
1 : when modification of the schedule failed because of the schedule corresponding to id does not exist

int Delete(int id)
Delete te existing schedule corresponding to id.

Parameters
id : the ID value of the schedule to be deleted.

Returns
0 : when the schedule is successfully deleted
1 : when deletion of the schedule failed because the schedule corresponding to id does not exist

RESULT Search(SEARCH_TYPE type, char* str)
Search a schedule using a search type and character strings and return the number of corresponding schedules and ID list.
The order of returned schedule ID is irrelevant.
When the search type is TITLE or LOCATION, it must match exactly with str.
When the search type is DATE, search all schedules that are related to the corresponding date.

Paramters
type : Search type (0) Title, (1) Location, (2) Date
str : The value of string to be searched. When the search is DATE, the format is YYYMMDD.

Returns
RESULT.count : Number of searched schedules. If there is no searched schedule found, return 0.
RESULT.id_list : The list of ID of the searched schedules. It must be stored in id_list[0]~id_list[count-1]


[Constraints]
At the beginning of ec test case, Init() function is called.
In each test case, the total number of API calling is less than or equal to 10.000.
In each test case, id is entered from 1 in consecutive order and it does not repeat.
The maximum length of a character string entered in TITLE and LOCATION is 19.
The length of a character string entered in START_DATE and END_DATE is 12.
The length of str that is entered when a DATE type search is performed in a Search function is 8.
The range of entered date is from January 1, 2001 to December 31, 2019.
Assume that every month has 31 days.
Time is expressed using 24-hour time notation, going from 0000 to 2359.
Abnormal formats of date, time and range are guaranteed to not happened in the test cases.
The alphabet is case-sensitive, and TITLE and LOCATION always start with an alphabet.
